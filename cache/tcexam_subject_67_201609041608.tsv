M=MODULE	module_enabled	module_name
S=SUBJECT	subject_enabled	subject_name	subject_description
Q=QUESTION	question_enabled	question_description	question_explanation	question_type	question_difficulty	question_position	question_timer	question_fullscreen	question_inline_answers	question_auto_next
A=ANSWER	answer_enabled	answer_description	answer_explanation	answer_isright	answer_position	answer_keyboard_key

M	1	Databases
S	1	DBMS Subject 1 Linked Q(2)	Databases - 1
Q	1	[b]Linked Questions Q23 &Q24[/b]:\r\nConsider the following relation\r\n\tCARSALE(Car#, Date_sold, Salesman#, Commission%, Discount_amt). Assume that car may be sold by multiple salesmen and hence {Car#, Salesman#} is the primary key. Additional dependencies are\r\n\tDate_sold → Discount_amt and Salesman# → commission%\r\n\r\nWhat is the highest normal form that the above relation satisfies?		S	2	1	0	0	0	0
A	1	2NF		0	1	
A	1	1NF	Given relation CARSALE (Car#, Date_sold, Salesman#, Commission%, Discount_amt)\r\n\tGiven {Car#, Salesman#} is the primary key.\r\n\t\t⇒ Prime attributes = {Car#, Salesman#}\r\n\tAdditional FD is\r\n\t\tDate_sold → Discount_amt\r\n\t\tSalesman# → Commission%\r\n\t∴ FD’s of above relation are\r\n\t\tCar# Salesman# → Date_sold Commission% Discount_amt     ----- (1)\r\n\t\tDate_sold → Discount_amt       ----- (2)\r\n\t\tSalesman# → Commission%     ----- (3)\r\n\r\n[u]Checking for 2NF[/u]:\r\n\tA relation r is said to be in 2NF, if they are no partial dependencies in r.\r\n\tPartial dependency is nothing but part of the key determining non-key attribute.\r\n\tHere FD (3) is partial dependency since salesman# which is part of key determining non-prime attribute commission%\r\n\t∴ Highest normal form, the above relation satisfying is 1NF	1	2	
A	1	3NF		0	3	
A	1	BCNF		0	4	
Q	1	[b]Linked Questions Q23 &Q24[/b]:\r\nConsider the following relation\r\n\tCARSALE(Car#, Date_sold, Salesman#, Commission%, Discount_amt). Assume that car may be sold by multiple salesmen and hence {Car#, Salesman#} is the primary key. Additional dependencies are\r\n\tDate_sold → Discount_amt and Salesman# → commission%\r\n\r\nIf we decompose the above relation into 3NF, how many tables will be formed?		S	2	2	0	0	0	0
A	1	1		0	1	
A	1	2		0	2	
A	1	3	Given FD’s\r\n\tCar# Salesman# → Date_sold Commission% Discount_amt     ----- (1)\r\n\t         Date_sold → Discount_amt       ----- (2)\r\n\t         Salesman# → Commission%     ----- (3)\r\n\tFormal definition of 3NF states that a relation r is said to be in 3NF, if for every non-trivial FD X → Y in R either X should be a super key in r or Y is a prime attribute\r\n\tPrime attributes of given relation:\r\n\t\t{Car#, Salesman#}\r\n\tHere FD (2) violates 3NF since left hand side of FD i.e., Date_sold is not super key and RHS of FD i.e., Discount_amt is not prime attribute.\r\n\tSo, FD (2) violates 3NF\r\n\t\tfind (Date_sold)+, (Date_sold)+ = Date_sold, Discount_amt\r\n\tHere FD (3) violates 3NF since left hand side of FD i.e., Salesman# is not super key and RHS of FD i.e., Commission% is not a prime attribute. So, FD (3) violates 3NF\r\n\tSo, find {Salesman#}+, {Salesman#}+ = Salesman# Commission%\r\n\t∴ Lets assume Car# as A, Salesman# as B, Date_sold as C, Commission% as D, Discount_amt as E,\r\n\t∴ Key : {AB}\r\n\t    Prime attributes = {A, B}\r\n\tGiven FD’s are\r\n\t\tAB → CDE\r\n\t\t   C → E\r\n\t\t   B → D\r\n                        [u]Decomposition of R into 3NF[/u]:\r\n\t[object]DBMS Subject Test 1/Q24_exp.PNG[/object:284:148:] \r\n\t∴ Number of tables formed after decomposition into 3NF is 3.	1	3	
A	1	4		0	4	
